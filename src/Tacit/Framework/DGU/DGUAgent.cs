using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Tacit.Framework.DGU;

public abstract class DGUAgent : ISmartObject {
    public abstract string Id { get; }
    public AgentEnvironment Environment { get; }
    public FactMemory FactMemory { get; }
    public DGUPlanner Planner { get; }
    public List<Drive> Drives { get; } = new();
    public List<Goal> Goals { get; } = new();
    public List<Sensor> Sensors { get; } = new();

    public List<VirtualAction> ConsumableActions { get; } = new();
    public List<VirtualAction> SuppliedActions { get; } = new();

    public DGUAgent(AgentEnvironment environment) {
        Environment = environment;
        FactMemory = new FactMemory();
        Planner = new DGUPlanner(FactMemory, Drives, Goals);
    }

    #region Implement Sense

    /// <summary>
    /// sensors read data from the environment and update facts
    /// </summary>
    /// <returns></returns>
    private Task UpdateSensors() {
        foreach (var sensor in Sensors) {
            sensor.Update();
        }

        return Task.CompletedTask;
    }

    #endregion

    #region Implement Act

    private Task PropagateEffects() {
        return Task.CompletedTask;
    }

    #endregion

    #region Sense-Think-Act outline

    public async Task SenseStage() {
        await UpdateSensors();
    }

    public async Task ThinkStage() {
        // - update internal state
        await UpdateDrives();
        await UpdateGoals();
        await UpdateInternalState();

        // - ask the planning algorithm
        await RequestPlans();
    }

    public Task ActStage() {
        PropagateEffects();

        return Task.CompletedTask;
    }

    #endregion

    #region Implement Think

    private async Task UpdateDrives() {
        foreach (var drive in Drives.ToArray()) {
            // update drive state
            await drive.Update();
            
            // check removal triggers
            foreach (var trigger in drive.RemovalTriggers) {
                if (await trigger.Evaluate()) {
                    // remove the drive
                    Drives.Remove(drive);
                    // remove all goals generated by the drive
                    var goalsGeneratedByDrive = Goals.FindAll(goal => goal.DriveGeneratedBy == drive);
                    foreach (var goal in goalsGeneratedByDrive) {
                        Goals.Remove(goal);
                    }
                }
            }
        }
    }

    private async Task UpdateGoals() {
        foreach (var goal in Goals) {
            await goal.Update();
            
            // check removal triggers
            foreach (var trigger in goal.RemovalTriggers) {
                if (await trigger.Evaluate()) {
                    Goals.Remove(goal);
                }
            }
        }
    }

    private async Task UpdateInternalState() {
        throw new NotImplementedException();
    }

    protected abstract Task<float> Evaluate();

    private Task RequestPlans() {
        throw new NotImplementedException();
    }

    #endregion

}